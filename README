██████╗ ██████╗  ██████╗ ████████╗ ██████╗███╗   ██╗███╗   ██╗
██╔══██╗██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝████╗  ██║████╗  ██║
██████╔╝██████╔╝██║   ██║   ██║   ██║     ██╔██╗ ██║██╔██╗ ██║
██╔═══╝ ██╔══██╗██║   ██║   ██║   ██║     ██║╚██╗██║██║╚██╗██║
██║     ██║  ██║╚██████╔╝   ██║   ╚██████╗██║ ╚████║██║ ╚████║
╚═╝     ╚═╝  ╚═╝ ╚═════╝    ╚═╝    ╚═════╝╚═╝  ╚═══╝╚═╝  ╚═══╝


DESCRIPTION
    Protein classifier

USAGE
    python src/train.py [-h] --dataset_path DATASET_PATH --log_path LOG_PATH
                [--seq_max_len SEQ_MAX_LEN] [--batch_size BATCH_SIZE]
                [--num_workers NUM_WORKERS] [--epochs EPOCHS]
                [--accelerator {cpu,gpu}] 
                [--learning_rate LEARNING_RATE] [--momentum MOMENTUM]
                [--weight_decay WEIGHT_DECAY] [--gamma GAMMA]
                [--ckpt_path CKPT_PATH] [--train] [--test] [--analyze]

    required arguments:
        --dataset_path DATASET_PATH, -d DATASET_PATH
                                Path to the splitted dataset
        --log_path LOG_PATH, -l LOG_PATH
                                Path to the output log directory

    optional arguments:
        --help, -h              show this help message and exit
        --seq_max_len SEQ_MAX_LEN, -s SEQ_MAX_LEN
                                Maximum length of sequences to consider for
                                training (default: 120)
        --batch_size BATCH_SIZE, -b BATCH_SIZE
                                Batch size for training (default: 512)
        --num_workers NUM_WORKERS, -n NUM_WORKERS
                                Number of workers to use for the dataloaders
                                (default: 8)
        --epochs EPOCHS, -e EPOCHS
                                Number of epochs for the training (default: 25)
        --accelerator {cpu,gpu}, -a {cpu,gpu}
                                Type of device to use for the training
                                (default: cpu)
        --learning_rate LEARNING_RATE, -lr LEARNING_RATE
                                Learning rate for the optimizer (default: 1e-2)
        --momentum MOMENTUM, -m MOMENTUM
                                Momentum for the optimizer (default: 0.9)
        --weight_decay WEIGHT_DECAY, -w WEIGHT_DECAY
                                Weight decay for the optimizer (default: 1e-2)
        --gamma GAMMA, -g GAMMA
                                Multiplicative factor of learning rate decay
                                (default: 0.9)
        --ckpt_path CKPT_PATH
                                Path to the saved model checkpoint.
                                This parameter is mandatory only when
                                flag --test is set without flag --train
                                (default: 'best')
        --train                 Flag to allow the training of the model
        --test                  Flag to allow the testing of the model
        --analyze               Flag to allow the analysis of dataset

    If you run the program locally make sure to launch
    pip install -r requirements.txt to install all the necessary packages
    first (ideally in a virtual environment). Also, if you want to use
    gpu with docker we suggest to use nvidia-docker.

    To use docker, first make sure that you have enough ressources in the
    docker configuration (cpu, shared memory, ...).
    Then you can use those commands:
        1) docker build -t protcnn .
        2) docker run protcnn python src/train.py <args>

    Note that the results of the analysis generated with the --analyze
    parameter will be stored in <log_path>/analysis folder.
    The model trained with the --train parameter will be stored in
    <log_path>/default/version_x/checkpoints. Also note that the program
    will keep only the best model (according to its validation loss).
    If you only want to test a model just put the --test flag without --train
    or --analyze. In this case you will have to provide the program with
    the ckpt_path parameter set to the path of a checkpoint.
